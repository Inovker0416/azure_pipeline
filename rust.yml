# defaults for any parameters that aren't specified
parameters:
  rust: stable
  components: []
  targets: []
  run:
    - script: cargo version
  cache: true

steps:
  - task: DownloadPipelineArtifact@2
    inputs:
      # no artifact name so that download won't fail if artifact does not exist
      targetPath: $(Agent.HomeDirectory)/.rustup
      itemPattern: rustup/**

  - script: ls $(Agent.HomeDirectory)/.rustup

  # Linux and macOS.
  - script: |
      set -e
      curl https://sh.rustup.rs -sSf | sh -s -- -y --profile minimal --default-toolchain $RUSTUP_TOOLCHAIN
      echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
    env:
      RUSTUP_TOOLCHAIN: ${{parameters.rust}}
    displayName: "Install rust (*nix)"
    condition: not(eq(variables['Agent.OS'], 'Windows_NT'))

  # Windows.
  - script: |
      curl -sSf -o rustup-init.exe https://win.rustup.rs
      rustup-init.exe -y --profile minimal --default-toolchain %RUSTUP_TOOLCHAIN%
      set PATH=%PATH%;%USERPROFILE%\.cargo\bin
      echo "##vso[task.setvariable variable=PATH;]%PATH%;%USERPROFILE%\.cargo\bin"
    env:
      RUSTUP_TOOLCHAIN: ${{parameters.rust}}
    displayName: "Install rust (windows)"
    condition: eq(variables['Agent.OS'], 'Windows_NT')

  # Set correct toolchain
  - bash: |
      rustup default $RUSTUP_TOOLCHAIN
      rustup update $RUSTUP_TOOLCHAIN
    env:
      RUSTUP_TOOLCHAIN: ${{parameters.rust}}
    displayName: "Set correct Rust version"

  # Install additional targets:
  - ${{ each target in parameters.targets }}:
    - script: rustup target add ${{ target }}
      displayName: "Adding target '${{ target }}'"

  # Install additional components:
  - ${{ each component in parameters.components }}:
    - script: rustup component add ${{ component }}
      displayName: "Adding component '${{ component }}'"

  - publish: $(Agent.HomeDirectory)/.rustup
    artifact: rustup

  # See what we got
  - script: |
      rustc --version
      cargo --version
      rustup --version
    displayName: Check installed rust version

  - task: DownloadPipelineArtifact@2
    inputs:
      # no artifact name so that download won't fail if artifact does not exist
      itemPattern: target_${{parameters.rust}}/**

  # Set CARGO_TARGET_DIR to point to the artefact dir
  - script: echo "##vso[task.setvariable variable=CARGO_TARGET_DIR;]$(Pipeline.Workspace)/target_${{ parameters.rust }}"
    condition: not(eq(variables['Agent.OS'], 'Windows_NT'))
  - script: echo "##vso[task.setvariable variable=CARGO_TARGET_DIR;]$(Pipeline.Workspace)\target_${{ parameters.rust }}"
    condition: eq(variables['Agent.OS'], 'Windows_NT')

  # Run the user's commands
  - ${{ parameters.run }}

  # Cache the updated target dir
  - publish: $(Pipeline.Workspace)/target_${{ parameters.rust }}
    artifact: target_${{ parameters.rust }}
