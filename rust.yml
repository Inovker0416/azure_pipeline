# defaults for any parameters that aren't specified
parameters:
  rust: stable
  components: []
  targets: []
  run:
    - script: cargo test
  use_cache: true
  cache: true

steps:
  # Get home directory
  # We need this due to https://github.com/MicrosoftDocs/vsts-docs/issues/4337
  - script: |
      echo "##vso[task.setvariable variable=home;]$HOME"
    displayName: "Find HOME (*nix)"
    condition: not(eq(variables['Agent.OS'], 'Windows_NT'))
  - script: |
      echo ##vso[task.setvariable variable=home;]%USERPROFILE%
    displayName: "Find HOME (windows)"
    condition: eq(variables['Agent.OS'], 'Windows_NT')

  - bash: |
      echo "##vso[task.setvariable variable=suffix;]$(Agent.OS)-$(Agent.OSArchitecture)-${{ parameters.rust }}"
    displayName: "Set cache suffix"

  # Restore cache if we have one
  - task: DownloadPipelineArtifact@2
    inputs:
      # no artifact name so that download won't fail if artifact does not exist
      itemPattern: '@(target|cargo)-$(suffix)/**'
    displayName: "Download pipeline cache"
    condition: ${{ parameters.use_cache }}

  # restore $HOME/.cargo from cache
  - script: |
      rm -rf $(home)/.cargo
      [ ! -d $(Pipeline.Workspace)/cargo-$(suffix) ] || mv $(Pipeline.Workspace)/cargo-$(suffix) $(home)/.cargo
    displayName: "Restore cargo cache"
    condition: ${{ parameters.use_cache }}

  # Next, install rustup to manage our install
  # Linux and macOS.
  - script: |
      set -e
      curl https://sh.rustup.rs -sSf | sh -s -- -y --profile minimal --default-toolchain $RUSTUP_TOOLCHAIN
      echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
    env:
      RUSTUP_TOOLCHAIN: ${{parameters.rust}}
    displayName: "Install rust (*nix)"
    condition: not(eq(variables['Agent.OS'], 'Windows_NT'))

  # Windows.
  - script: |
      curl -sSf -o rustup-init.exe https://win.rustup.rs
      rustup-init.exe -y --profile minimal --default-toolchain %RUSTUP_TOOLCHAIN%
      set PATH=%PATH%;%USERPROFILE%\.cargo\bin
      echo "##vso[task.setvariable variable=PATH;]%PATH%;%USERPROFILE%\.cargo\bin"
    env:
      RUSTUP_TOOLCHAIN: ${{parameters.rust}}
    displayName: "Install rust (windows)"
    condition: eq(variables['Agent.OS'], 'Windows_NT')

  # Set correct toolchain
  - bash: |
      rustup default $RUSTUP_TOOLCHAIN
      rustup update $RUSTUP_TOOLCHAIN
    env:
      RUSTUP_TOOLCHAIN: ${{parameters.rust}}
    displayName: "Set correct Rust version"

  # Install additional targets:
  - ${{ each target in parameters.targets }}:
    - script: rustup target add ${{ target }}
      displayName: "Adding target '${{ target }}'"

  # Install additional components:
  - ${{ each component in parameters.components }}:
    - script: rustup component add ${{ component }}
      displayName: "Adding component '${{ component }}'"

  # See what we got
  - script: |
      rustc --version
      cargo --version
      rustup --version
    displayName: Check installed rust version

  # Set CARGO_TARGET_DIR to point to the artefact dir
  - script: echo "##vso[task.setvariable variable=CARGO_TARGET_DIR;]$(Pipeline.Workspace)/target-$(suffix)"
    condition: and(${{ parameters.cache }}, not(eq(variables['Agent.OS'], 'Windows_NT')))
    displayName: "Make cargo use pipeline cache (*nix)"
  - script: |
      echo ##vso[task.setvariable variable=CARGO_TARGET_DIR;]$(Pipeline.Workspace)\target-$(suffix)
    condition: and(${{ parameters.cache }}, eq(variables['Agent.OS'], 'Windows_NT'))
    displayName: "Make cargo use pipeline cache (windows)"

  # Run the user's commands
  - ${{ parameters.run }}

  # Cache the updated target dir
  - publish: $(Pipeline.Workspace)/target-$(suffix)
    artifact: target-$(suffix)
    displayName: "Upload pipeline cache of target/"
    condition: ${{ parameters.cache }}

  # And the .cargo dir
  - publish: $(home)/.cargo
    artifact: cargo-$(suffix)
    displayName: "Upload pipeline cache of ~/.cargo"
    condition: ${{ parameters.cache }}
