parameters:
  rust: stable
  allow_fail: false
  cross: false
  envs: {}
  setup: []
  test_ignored: false
  single_threaded: false
  features: '' # empty feature list is == default
  services: {}

jobs:
- job: ${{ parameters.name }}
  ${{ if eq('true', parameters.test_ignored) }}:
    displayName: cargo +${{ parameters.rust }} test -- --ignored
  ${{ if ne('true', parameters.test_ignored) }}:
    displayName: cargo +${{ parameters.rust }} test
  continueOnError: ${{ parameters.allow_fail }}
  ${{ if eq('true', parameters.cross) }}:
    strategy:
      matrix:
        Linux:
          vmImage: ubuntu-16.04
        MacOS:
          vmImage: macOS-10.14
        Windows:
          vmImage: windows-2019
  ${{ if ne('true', parameters.cross) }}:
    variables:
      vmImage: ubuntu-16.04
  pool:
    vmImage: $(vmImage)
  services:
    ${{ insert }}: ${{ parameters.services }}
  steps:
  - template: _setup.yml
    parameters:
      rust: ${{ parameters.rust }}
      setup: ${{ parameters.setup }}
  - ${{ if ne('true', parameters.single_threaded) }}:
    - script: cargo test --all --features "${{ parameters.features }}"
      displayName: Run tests
      env:
        ${{ insert }}: ${{ parameters.envs }}
  - ${{ if eq('true', parameters.single_threaded) }}:
    - script: cargo test --all --features "${{ parameters.features }}" -- --test-threads=1
      displayName: Run tests (single-threaded)
      env:
        ${{ insert }}: ${{ parameters.envs }}
  - ${{ if and(eq('true', parameters.test_ignored), ne('true', parameters.single_threaded)) }}:
    - script: cargo test --all --features "${{ parameters.features }}" -- --ignored
      displayName: Run ignored tests
      env:
        ${{ insert }}: ${{ parameters.envs }}
  - ${{ if and(eq('true', parameters.test_ignored), eq('true', parameters.single_threaded)) }}:
    - script: cargo test --all --features "${{ parameters.features }}" -- --ignored --test-threads=1
      displayName: Run ignored tests (single-threaded)
      env:
        ${{ insert }}: ${{ parameters.envs }}
