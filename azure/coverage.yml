parameters:
  envs: {}
  services: {}
  setup: []
  submodules: recursive
  nightly: false
  features: []

jobs:
 - job: tarpaulin
   displayName: tarpaulin
   pool:
     vmImage: ubuntu-16.04
   # this is sad: we need to spin up the service containers even if the token
   # isn't set, since we can't set a service in a particular script step.
   # once the fix to
   # https://developercommunity.visualstudio.com/content/problem/642219/setting-output-variable-when-multiple-stages-share.html
   # lands everywhere, we can move to multiple jobs instead, and then only the
   # (conditional) second job will have this service.
   services:
     ${{ insert }}: ${{ parameters.services }}
   continueOnError: ${{ parameters.nightly }}
   container:
     ${{ if eq('true', parameters.nightly) }}:
       image: xd009642/tarpaulin:latest-nightly
     ${{ if ne('true', parameters.nightly) }}:
       image: xd009642/tarpaulin:latest
     options: --security-opt seccomp=unconfined
   steps:
     # Allow the user to define checkout: self completely manually
     # (they would do so in parameters.setup)
     # If they don't, we will helpfully check out all submodules recursively
     - ${{ if ne(parameters.submodules, 'manual') }}:
       - checkout: self
         submodules: ${{ parameters.submodules }}
     # workaround for https://github.com/MicrosoftDocs/vsts-docs/issues/4841
     # we sadly can't do this in a separate job, because:
     # https://developercommunity.visualstudio.com/content/problem/642219/setting-output-variable-when-multiple-stages-share.html
     # if we _could_, then we could set a condition on this whole job
     # which would let us avoid pulling down and spinning up the container
     # one day we may even be able to use this trick to skip the coverage stage
     # but we'll need https://github.com/MicrosoftDocs/vsts-docs/issues/4466
     # note that we intentionally do not leak the secret itself
     - script: "if [[ -n $CHECK ]] && [[ ! $CHECK == '$('* ]]; then echo '##vso[task.setvariable variable=has_secret]true'; else echo '##vso[task.setvariable variable=has_secret]false'; fi"
       name: secret_check
       displayName: Check for codecov token
       env:
         CHECK: ${{ parameters.codecov_token }}
     # Run any user-specific setup steps
     # Sadly we don't have a way of communicating the condition on has_secret
     - ${{ parameters.setup }}
     # Determine what features to use
     - bash: "if [[ -n $FEATURES ]]; then echo '##vso[task.setvariable variable=features]'; else echo '##vso[task.setvariable variable=features]--features \"$FEATURES\"'; fi"
       name: features
       displayName: Determine feature flags
       env:
         FEATURES: ${{ join(",", parameters.features) }}
     - script: cargo tarpaulin $(variables.features) --out Xml
       displayName: Run tarpaulin
       condition: and(succeeded(), eq('true', variables.has_secret))
       env:
         ${{ insert }}: ${{ parameters.envs }}
     - script: bash <(curl -s https://codecov.io/bash)
       displayName: Upload results to codecov
       condition: and(succeeded(), eq('true', variables.has_secret))
       env:
         CODECOV_TOKEN: ${{ parameters.codecov_token }}
